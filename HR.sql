SELECT FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID FROM employees WHERE SALARY < = 10000;

SELECT FIRST_NAME, LAST_NAME, JOB_ID, COMMISSION_PCT 
FROM employees WHERE COMMISSION_PCT IS NULL;

SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID FROM employees WHERE FIRST_NAME = 'John';

SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID FROM employees WHERE FIRST_NAME LIKE 'John';

SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID, SALARY FROM employees WHERE DEPARTMENT_ID = 80 AND SALARY < 10000;

SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID, SALARY FROM employees
WHERE DEPARTMENT_ID IN (80, 110)
AND SALARY BETWEEN 10000 AND 17000;

SELECT FIRST_NAME, LAST_NAME,  DEPARTMENT_ID, SALARY, COMMISSION_PCT FROM employees
WHERE COMMISSION_PCT IS NOT NULL
AND DEPARTMENT_ID IN (80, 110)
AND SALARY BETWEEN 10000 AND 17000;

SELECT FIRST_NAME, LAST_NAME, MANAGER_ID FROM employees
WHERE FIRST_NAME LIKE 'D%'
AND MANAGER_ID LIKE 108;

SELECT * FROM employees
WHERE MANAGER_ID IN (100, 108, 124);

SELECT * FROM employees 
WHERE COMMISSION_PCT IS NULL
AND SALARY < 10000
ORDER BY SALARY  DESC;

SELECT CONCAT (FIRST_NAME, CONCAT ( ' ', LAST_NAME))
AS List_of_employees_for_review, SALARY, COMMISSION_PCT  FROM employees
WHERE COMMISSION_PCT IS NULL
AND SALARY < 10000
ORDER BY SALARY DESC;

SELECT FIRST_NAME ||' '|| LAST_NAME
AS List_of_employees_for_review, SALARY, COMMISSION_PCT FROM employees
WHERE COMMISSION_PCT IS NULL
AND SALARY < 10000
ORDER BY SALARY DESC;

SELECT DEPARTMENT_NAME, 
CASE
    WHEN LOCATION_ID = 1700 THEN 'Washington'
    WHEN LOCATION_ID = 1400 THEN 'Texas'
    WHEN LOCATION_ID IN (1500, 2500) THEN 'California'
    WHEN LOCATION_ID = 1800 THEN 'Ontario'
    WHEN LOCATION_ID = 2400 THEN 'Other'
    WHEN LOCATION_ID = 2700 THEN 'Bavaria'
ELSE Unknown
END AS STATE
FROM DEPARTMENTS;


SELECT COUNT(COUNTRY_ID), COUNTRY_ID FROM LOCATIONS
GROUP BY COUNTRY_ID
ORDER BY COUNT(COUNTRY_ID) DESC;

SELECT COUNT(COUNTRY_ID), COUNTRY_ID FROM LOCATIONS
GROUP BY COUNTRY_ID 
HAVING COUNT(COUNTRY_ID) >= 2
ORDER BY COUNTRY_ID ASC;

SELECT LOCATIONS.STREET_ADDRESS, LOCATIONS.STATE_PROVINCE, COUNTRIES.COUNTRY_NAME
FROM LOCATIONS
FULL JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
ORDER BY COUNTRY_NAME ASC;

SELECT COUNT (LOCATIONS.STREET_ADDRESS), COUNTRIES.COUNTRY_NAME
FROM LOCATIONS
JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
GROUP BY COUNTRIES.COUNTRY_NAME
ORDER BY COUNTRY_NAME ASC;

SELECT LOCATIONS.STATE_PROVINCE, COUNTRIES.COUNTRY_NAME, REGIONS.REGION_NAME
FROM LOCATIONS
FULL JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
FULL JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID;

SELECT COUNT (LOCATIONS.STREET_ADDRESS), COUNT (COUNTRIES.COUNTRY_NAME),
REGIONS.REGION_NAME
FROM LOCATIONS
JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID
GROUP BY REGIONS.REGION_NAME;

SELECT COUNT (LOCATIONS.STREET_ADDRESS) AS address ,
COUNT (COUNTRIES.COUNTRY_NAME) AS country,
REGIONS.REGION_NAME AS region
FROM LOCATIONS
JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID
GROUP BY REGIONS.REGION_NAME;

SELECT COUNT (LOCATIONS.STREET_ADDRESS),
COUNT (COUNTRIES.COUNTRY_NAME),
REGIONS.REGION_NAME
FROM LOCATIONS
JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID
GROUP BY REGIONS.REGION_NAME
HAVING COUNT (REGIONS.REGION_NAME) > 6;

SELECT COUNT (LOCATIONS.STREET_ADDRESS) AS address,
COUNT (COUNTRIES.COUNTRY_NAME) AS countries,
REGIONS.REGION_NAME AS region
FROM LOCATIONS
JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID
JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID
GROUP BY REGIONS.REGION_NAME
HAVING COUNT (REGIONS.REGION_NAME) ;

SELECT EMPLOYEE_ID, HIRE_DATE, NULL AS END_DATE FROM EMPLOYEES
UNION
SELECT EMPLOYEE_ID, START_DATE, END_DATE FROM JOB_HISTORY;

SELECT status, COUNT(*) AS quantity
FROM (
    SELECT 'current_employee' AS status
    FROM employees
    UNION ALL
    SELECT 'fired_employee' AS status
    FROM job_history
) 
GROUP BY status;

SELECT 
    job_id,
    CASE 
        WHEN end_date IS NULL THEN 'current_employee'
        ELSE 'fired_employee'
    END AS status,
    COUNT(*) AS quantity
FROM (
    SELECT job_id, NULL AS end_date
    FROM employees
    UNION ALL
    SELECT job_id, end_date
    FROM job_history
)
GROUP BY 
    job_id,
    CASE 
        WHEN end_date IS NULL THEN 'current_employee'
        ELSE 'fired_employee'
    END
ORDER BY 
    job_id,
    status;

SELECT department_id, COUNT(*) AS fired
FROM job_history
WHERE department_id IN (
    SELECT department_id
    FROM job_history
    GROUP BY department_id
    HAVING COUNT(*) > 1
)
GROUP BY department_id
ORDER BY fired DESC;

SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id IN (
    SELECT department_id
    FROM job_history
    WHERE MONTHS_BETWEEN(end_date, start_date) < 12
);

SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id IN (
    SELECT department_id
    FROM job_history
    WHERE MONTHS_BETWEEN(end_date, start_date) > 12
);

SELECT department_id, COUNT(*) AS employee
FROM employees
WHERE department_id IN (
    SELECT department_id
    FROM job_history
    WHERE MONTHS_BETWEEN(end_date, start_date) > 12
)
GROUP BY department_id
ORDER BY employee DESC;


INSERT INTO EMPLOYEES (EMPLOYEES.EMPLOYEE_ID,
EMPLOYEES.FIRST_NAME,
EMPLOYEES.LAST_NAME,
EMPLOYEES.EMAIL,
EMPLOYEES.PHONE_NUMBER,
EMPLOYEES.HIRE_DATE,
EMPLOYEES.JOB_ID,
EMPLOYEES.SALARY,
EMPLOYEES.COMMISSION_PCT,
EMPLOYEES.MANAGER_ID,
EMPLOYEES.DEPARTMENT_ID)
VALUES (999, 'Oleksandra', 'Yukhumchuk', '111@gmail.com', '111',
 SYSDATE, 'MK_REP', 25000, null, 205, 110);

UPDATE EMPLOYEES 
SET DEPARTMENT_ID = 90, SALARY = 30000
WHERE EMPLOYEE_ID = 999;

DELETE FROM EMPLOYEES
WHERE EMPLOYEE_ID = 999; 





